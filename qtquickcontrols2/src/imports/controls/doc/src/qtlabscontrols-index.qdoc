/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qtlabscontrols-index.html
    \title Qt Labs Controls

    \brief Provides a set of UI controls for Qt Quick.

    Qt Labs Controls provides a set of controls that can be used
    to build complete interfaces in Qt Quick.

    \section1 QML Types

    \section2 Qt.labs.controls Module
    \generatelist {qmltypesbymodule Qt.labs.controls}

    \section2 Qt.labs.calendar Module
    \generatelist {qmltypesbymodule Qt.labs.calendar}

    \section1 Getting Started

    A basic example of a QML file that makes use of controls is shown here:

    \snippet basic-example.qml 0

    \section1 Setting Up Controls from C++

    Although QQuickView has traditionally been used to display QML files in a
    C++ application, doing this means you can only set window properties from
    C++.

    With Qt Labs Controls, declare an ApplicationWindow as the root item of
    your application and launch it by using QQmlApplicationEngine instead.
    This ensures that you can control top level window properties from QML.

    A basic example of a source file that makes use of controls is shown here:

    \code
    #include <QApplication>
    #include <QQmlApplicationEngine>

    int main(int argc, char *argv[])
    {
        QGuiApplication app(argc, argv);
        QQmlApplicationEngine engine("main.qml");
        return app.exec();
    }
    \endcode

    \section2 Using C++ Data From QML

    If you need to register a C++ class to use from QML, you can call
    qmlRegisterType() before declaring your QQmlApplicationEngine.
    See \l [QtQml] {Defining QML Types from C++} for more information.

    If you need to expose data to QML components, you need to make them
    available to the context of the current QML engine. See QQmlContext for
    more information.

    \section2 Deploying Qt Labs Controls

    TODO

    \section1 Related Information

    \list
      \li \l{Qt Quick}
      \li \l{Qt Quick Layouts}
      \li \l{Qt Labs Calendar}
      \li \l{Differences between Qt Quick Controls}
      \li \l{Qt Labs Controls QML Types}{Qt Labs Controls QML Types}
    \endlist
*/
